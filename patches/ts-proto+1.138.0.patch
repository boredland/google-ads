diff --git a/node_modules/ts-proto/build/main.js b/node_modules/ts-proto/build/main.js
index 8a5045f..3537e9e 100644
--- a/node_modules/ts-proto/build/main.js
+++ b/node_modules/ts-proto/build/main.js
@@ -1218,11 +1218,12 @@ function generateFromJson(ctx, fullName, fullTypeName, messageDesc) {
     chunks.push((0, ts_poet_1.code) `}`);
     return (0, ts_poet_1.joinCode)(chunks, { on: "\n" });
 }
-function generateCanonicalToJson(fullName, fullProtobufTypeName) {
+function generateCanonicalToJson(ctx, fullName, fullProtobufTypeName) {
+  const maybeNonNullAssertion = ctx.options.useOptionals === "all" ? "!" : "";
     if ((0, types_1.isFieldMaskTypeName)(fullProtobufTypeName)) {
         return (0, ts_poet_1.code) `
     toJSON(message: ${fullName}): string {
-      return message.paths.join(',');
+      return message.paths${maybeNonNullAssertion}.join(',');
     }
   `;
     }
@@ -1231,7 +1232,7 @@ function generateCanonicalToJson(fullName, fullProtobufTypeName) {
 function generateToJson(ctx, fullName, fullProtobufTypeName, messageDesc) {
     const { options, utils, typeMap } = ctx;
     const chunks = [];
-    const canonicalToJson = generateCanonicalToJson(fullName, fullProtobufTypeName);
+    const canonicalToJson = generateCanonicalToJson(ctx, fullName, fullProtobufTypeName);
     if (canonicalToJson) {
         chunks.push(canonicalToJson);
         return (0, ts_poet_1.joinCode)(chunks, { on: "\n" });
@@ -1639,6 +1640,7 @@ function generateWrap(ctx, fullProtoTypeName, fieldNames) {
     return chunks;
 }
 function generateUnwrap(ctx, fullProtoTypeName, fieldNames) {
+  const maybeNonNullAssertion = ctx.options.useOptionals === "all" ? "!" : "";
     const chunks = [];
     if ((0, types_1.isStructTypeName)(fullProtoTypeName)) {
         if (ctx.options.useMapType) {
@@ -1706,7 +1708,7 @@ function generateUnwrap(ctx, fullProtoTypeName, fieldNames) {
     }
     if ((0, types_1.isFieldMaskTypeName)(fullProtoTypeName)) {
         chunks.push((0, ts_poet_1.code) `unwrap(message: ${ctx.options.useReadonlyTypes ? "any" : "FieldMask"}): string[] {
-      return message.paths;
+      return message.paths${maybeNonNullAssertion};
     }`);
     }
     return chunks;
